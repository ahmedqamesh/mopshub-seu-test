//
// Module I2C_HC_TestMaster_lib.i2c_hc_testmaster.struct
//
// Created:
//          by - lehmann.edagrp (chipdev2.physik.uni-wuppertal.de)
//          at - 20:20:21 09/27/16
//
// Generated by Mentor Graphics' HDL Designer(TM) 2015.1b (Build 4)
//

`resetall
`timescale 1ns/10ps
module scb_testmaster( 
   // Port Declarations
   input   wire            S_AXI_ACLK, 
   input   wire    [9:0]   S_AXI_ARADDR, 
   input   wire            S_AXI_ARESETN, 
   input   wire            S_AXI_ARVALID, 
   input   wire    [9:0]   S_AXI_AWADDR, 
   input   wire            S_AXI_AWVALID, 
   input   wire            S_AXI_BREADY, 
   input   wire            S_AXI_RREADY, 
   input   wire    [31:0]  S_AXI_WDATA, 
   input   wire    [3:0]   S_AXI_WSTRB, 
   input   wire            S_AXI_WVALID, 
   input   wire            sdas, 
   output  wire            S_AXI_ARREADY, 
   output  wire            S_AXI_AWREADY, 
   output  wire    [1:0]   S_AXI_BRESP, 
   output  wire            S_AXI_BVALID, 
   output  wire    [31:0]  S_AXI_RDATA, 
   output  wire    [1:0]   S_AXI_RRESP, 
   output  wire            S_AXI_RVALID, 
   output  wire            S_AXI_WREADY, 
   output  wire            scl, 
   output  wire            sclx2, 
   output  wire            sdam, 
   output  wire            sdas_dec
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         clear_rx_start;
wire         clear_syndrom;
wire         clear_tx_start;
wire         clk;
wire         counter_ready;
wire  [7:0]  data;
wire         done_f;
wire         done_s;
wire  [11:0] hc_data;
wire         load_ack;
wire         load_counter;
wire         load_data;
wire         load_nack;
wire         load_start;
wire         load_stop;
wire         rx_allbytes;
wire  [12:0] rx_byte;
wire  [12:0] rx_byte0_f;
wire  [12:0] rx_byte10_f;
wire  [12:0] rx_byte11_f;
wire  [12:0] rx_byte12_f;
wire  [12:0] rx_byte13_f;
wire  [12:0] rx_byte14_f;
wire  [12:0] rx_byte15_f;
wire  [12:0] rx_byte1_f;
wire  [12:0] rx_byte2_f;
wire  [12:0] rx_byte3_f;
wire  [12:0] rx_byte4_f;
wire  [12:0] rx_byte5_f;
wire  [12:0] rx_byte6_f;
wire  [12:0] rx_byte7_f;
wire  [12:0] rx_byte8_f;
wire  [12:0] rx_byte9_f;
wire         rx_bytecnt;
wire         rx_bytecnt_clear;
wire  [3:0]  rx_bytes_sent_f;
wire  [3:0]  rx_bytes_sent_s;
wire  [3:0]  rx_nb_bytes_f;
wire  [3:0]  rx_nb_bytes_s;
wire         rx_shift_enable;
reg          rx_start;
wire         rx_start_f;
wire         rx_start_s;
wire  [6:0]  slave_addr_f;
wire  [6:0]  slave_addr_s;
wire         tx_allbytes;
wire  [7:0]  tx_byte;
wire  [7:0]  tx_byte0_f;
wire  [7:0]  tx_byte10_f;
wire  [7:0]  tx_byte11_f;
wire  [7:0]  tx_byte12_f;
wire  [7:0]  tx_byte13_f;
wire  [7:0]  tx_byte14_f;
wire  [7:0]  tx_byte15_f;
wire  [7:0]  tx_byte1_f;
wire  [7:0]  tx_byte2_f;
wire  [7:0]  tx_byte3_f;
wire  [7:0]  tx_byte4_f;
wire  [7:0]  tx_byte5_f;
wire  [7:0]  tx_byte6_f;
wire  [7:0]  tx_byte7_f;
wire  [7:0]  tx_byte8_f;
wire  [7:0]  tx_byte9_f;
wire         tx_bytecnt;
wire         tx_bytecnt_clear;
wire  [3:0]  tx_bytes_sent_f;
wire  [3:0]  tx_bytes_sent_s;
wire  [3:0]  tx_nb_bytes_f;
wire  [3:0]  tx_nb_bytes_s;
reg          tx_start;
wire         tx_start_f;
wire         tx_start_s;
wire         valid_syndrom;


// Instances 
hc_generator hc_generator_inst( 
   .data    (data), 
   .hc_data (hc_data)
); 

axi_control_unit axi_control_unit_inst( 
   .S_AXI_ACLK    (S_AXI_ACLK), 
   .S_AXI_ARESETN (S_AXI_ARESETN), 
   .S_AXI_AWADDR  (S_AXI_AWADDR), 
   .S_AXI_AWVALID (S_AXI_AWVALID), 
   .S_AXI_AWREADY (S_AXI_AWREADY), 
   .S_AXI_WDATA   (S_AXI_WDATA), 
   .S_AXI_WSTRB   (S_AXI_WSTRB), 
   .S_AXI_WVALID  (S_AXI_WVALID), 
   .S_AXI_WREADY  (S_AXI_WREADY), 
   .S_AXI_BRESP   (S_AXI_BRESP), 
   .S_AXI_BVALID  (S_AXI_BVALID), 
   .S_AXI_BREADY  (S_AXI_BREADY), 
   .S_AXI_ARADDR  (S_AXI_ARADDR), 
   .S_AXI_ARVALID (S_AXI_ARVALID), 
   .S_AXI_ARREADY (S_AXI_ARREADY), 
   .S_AXI_RDATA   (S_AXI_RDATA), 
   .S_AXI_RRESP   (S_AXI_RRESP), 
   .S_AXI_RVALID  (S_AXI_RVALID), 
   .S_AXI_RREADY  (S_AXI_RREADY), 
   .slave_addr    (slave_addr_f), 
   .tx_nb_bytes   (tx_nb_bytes_f), 
   .rx_nb_bytes   (rx_nb_bytes_f), 
   .tx_start      (tx_start_f), 
   .rx_start      (rx_start_f), 
   .tx_byte0      (tx_byte0_f), 
   .tx_byte1      (tx_byte1_f), 
   .tx_byte2      (tx_byte2_f), 
   .tx_byte3      (tx_byte3_f), 
   .tx_byte4      (tx_byte4_f), 
   .tx_byte5      (tx_byte5_f), 
   .tx_byte6      (tx_byte6_f), 
   .tx_byte7      (tx_byte7_f), 
   .tx_byte8      (tx_byte8_f), 
   .tx_byte9      (tx_byte9_f), 
   .tx_byte10     (tx_byte10_f), 
   .tx_byte11     (tx_byte11_f), 
   .tx_byte12     (tx_byte12_f), 
   .tx_byte13     (tx_byte13_f), 
   .tx_byte14     (tx_byte14_f), 
   .tx_byte15     (tx_byte15_f), 
   .done          (done_f), 
   .tx_bytes_sent (tx_bytes_sent_f), 
   .rx_bytes_sent (rx_bytes_sent_f), 
   .rx_byte0      (rx_byte0_f), 
   .rx_byte1      (rx_byte1_f), 
   .rx_byte2      (rx_byte2_f), 
   .rx_byte3      (rx_byte3_f), 
   .rx_byte4      (rx_byte4_f), 
   .rx_byte5      (rx_byte5_f), 
   .rx_byte6      (rx_byte6_f), 
   .rx_byte7      (rx_byte7_f), 
   .rx_byte8      (rx_byte8_f), 
   .rx_byte9      (rx_byte9_f), 
   .rx_byte10     (rx_byte10_f), 
   .rx_byte11     (rx_byte11_f), 
   .rx_byte12     (rx_byte12_f), 
   .rx_byte13     (rx_byte13_f), 
   .rx_byte14     (rx_byte14_f), 
   .rx_byte15     (rx_byte15_f)
); 

bit_counter bit_counter_inst( 
   .clk           (clk), 
   .load_counter  (load_counter), 
   .counter_ready (counter_ready), 
   .RSTn          (S_AXI_ARESETN), 
   .clk_en        (scl)
); 

byte_counter rx_byte_counter_inst( 
   .cnt     (rx_bytecnt), 
   .clear   (rx_bytecnt_clear), 
   .clk     (clk), 
   .RSTn    (S_AXI_ARESETN), 
   .limit   (rx_nb_bytes_s), 
   .number  (rx_bytes_sent_s), 
   .atlimit (rx_allbytes)
); 

byte_counter tx_byte_counter_inst( 
   .cnt     (tx_bytecnt), 
   .clear   (tx_bytecnt_clear), 
   .clk     (clk), 
   .RSTn    (S_AXI_ARESETN), 
   .limit   (tx_nb_bytes_s), 
   .number  (tx_bytes_sent_s), 
   .atlimit (tx_allbytes)
); 

clock_divider clock_divider_inst( 
   .RSTn       (S_AXI_ARESETN), 
   .clkin      (S_AXI_ACLK), 
   .clkdiv1000 (scl), 
   .clkdiv500  (clk), 
   .clkdiv500b (sclx2)
); 

clock_domain_crossing clock_domain_crossing_inst( 
   .slow_clk        (clk), 
   .fast_clk        (S_AXI_ACLK), 
   .RSTn            (S_AXI_ARESETN), 
   .rx_bytes_sent_f (rx_bytes_sent_f), 
   .rx_start_f      (rx_start_f), 
   .slave_addr_f    (slave_addr_f), 
   .tx_bytes_sent_f (tx_bytes_sent_f), 
   .tx_start_f      (tx_start_f), 
   .done_f          (done_f), 
   .tx_byte0_f      (tx_byte0_f), 
   .tx_byte1_f      (tx_byte1_f), 
   .tx_byte2_f      (tx_byte2_f), 
   .tx_byte3_f      (tx_byte3_f), 
   .tx_byte4_f      (tx_byte4_f), 
   .tx_byte5_f      (tx_byte5_f), 
   .tx_byte6_f      (tx_byte6_f), 
   .tx_byte7_f      (tx_byte7_f), 
   .tx_byte8_f      (tx_byte8_f), 
   .tx_byte9_f      (tx_byte9_f), 
   .tx_byte10_f     (tx_byte10_f), 
   .tx_byte11_f     (tx_byte11_f), 
   .tx_byte12_f     (tx_byte12_f), 
   .tx_byte13_f     (tx_byte13_f), 
   .tx_byte14_f     (tx_byte14_f), 
   .tx_byte15_f     (tx_byte15_f), 
   .rx_byte0_f      (rx_byte0_f), 
   .rx_byte1_f      (rx_byte1_f), 
   .rx_byte2_f      (rx_byte2_f), 
   .rx_byte3_f      (rx_byte3_f), 
   .rx_byte4_f      (rx_byte4_f), 
   .rx_byte5_f      (rx_byte5_f), 
   .rx_byte6_f      (rx_byte6_f), 
   .rx_byte7_f      (rx_byte7_f), 
   .rx_byte8_f      (rx_byte8_f), 
   .rx_byte9_f      (rx_byte9_f), 
   .rx_byte10_f     (rx_byte10_f), 
   .rx_byte11_f     (rx_byte11_f), 
   .rx_byte12_f     (rx_byte12_f), 
   .rx_byte13_f     (rx_byte13_f), 
   .rx_byte14_f     (rx_byte14_f), 
   .rx_byte15_f     (rx_byte15_f), 
   .rx_bytes_sent_s (rx_bytes_sent_s), 
   .rx_start_s      (rx_start_s), 
   .slave_addr_s    (slave_addr_s), 
   .tx_bytes_sent_s (tx_bytes_sent_s), 
   .tx_start_s      (tx_start_s), 
   .done_s          (done_s), 
   .tx_byte_s       (tx_byte), 
   .rx_byte_s       (rx_byte), 
   .tx_nb_bytes_f   (tx_nb_bytes_f), 
   .tx_nb_bytes_s   (tx_nb_bytes_s), 
   .rx_nb_bytes_f   (rx_nb_bytes_f), 
   .rx_nb_bytes_s   (rx_nb_bytes_s)
); 

master_fsm master_fsm_inst( 
   .RSTn             (S_AXI_ARESETN), 
   .addr             (slave_addr_s), 
   .clk              (clk), 
   .counter_ready    (counter_ready), 
   .rx_allbytes      (rx_allbytes), 
   .rx_start         (rx_start), 
   .scl              (scl), 
   .sda_in           (sdas_dec), 
   .tx_allbytes      (tx_allbytes), 
   .tx_data          (tx_byte), 
   .tx_start         (tx_start), 
   .valid_syndrom    (valid_syndrom), 
   .clear_rx_start   (clear_rx_start), 
   .clear_syndrom    (clear_syndrom), 
   .clear_tx_start   (clear_tx_start), 
   .data             (data), 
   .done             (done_s), 
   .load_ack         (load_ack), 
   .load_counter     (load_counter), 
   .load_data        (load_data), 
   .load_nack        (load_nack), 
   .load_start       (load_start), 
   .load_stop        (load_stop), 
   .rx_bytecnt       (rx_bytecnt), 
   .rx_bytecnt_clear (rx_bytecnt_clear), 
   .rx_shift_enable  (rx_shift_enable), 
   .tx_bytecnt       (tx_bytecnt), 
   .tx_bytecnt_clear (tx_bytecnt_clear)
); 

master_manchester_dec master_manchester_dec_inst( 
   .scl      (scl), 
   .sclx2    (clk), 
   .RSTn     (S_AXI_ARESETN), 
   .sdas_enc (sdas), 
   .sdas_dec (sdas_dec)
); 

rx_shift_reg rx_shift_reg_inst( 
   .clk           (clk), 
   .ser_in        (sdas_dec), 
   .data          (rx_byte), 
   .shift_en      (rx_shift_enable), 
   .RSTn          (S_AXI_ARESETN), 
   .clear_syndrom (clear_syndrom), 
   .valid         (valid_syndrom), 
   .clk_en        (scl)
); 

tx_shift_reg tx_shift_reg_inst( 
   .clk        (clk), 
   .data       (hc_data), 
   .out        (sdam), 
   .load_data  (load_data), 
   .RSTn       (S_AXI_ARESETN), 
   .load_start (load_start), 
   .load_stop  (load_stop), 
   .load_ack   (load_ack), 
   .load_nack  (load_nack)
); 

// HDL Embedded Text Block 1 startbuffer
// startbuffer 1                                        
always @(posedge sclx2 or negedge S_AXI_ARESETN)
begin
  if (~S_AXI_ARESETN)
  begin
    tx_start <= 0;
    rx_start <= 0;
  end
  else
  begin
    if (tx_start_s)
      tx_start <= 1;
    else if (clear_tx_start)
      tx_start <= 0;
    if (rx_start_s)
      rx_start <= 1;
    else if (clear_rx_start)
      rx_start <= 0;
  end
end

endmodule // scb_testmaster

