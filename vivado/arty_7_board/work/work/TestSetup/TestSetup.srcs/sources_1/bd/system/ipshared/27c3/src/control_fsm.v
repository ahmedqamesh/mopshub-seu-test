//
// Module SEUtestIP_lib.control.fsm
//
// Created:
//          by - caspar.caspar (chips.pleiades.uni-wuppertal.de)
//          at - 09:53:11 08/08/18
//
// Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
//
`resetall
`timescale 1ns/10ps
module control( 
   // Port Declarations
   input   wire            clk, 
   input   wire    [2:0]   cntbits,
   input   wire    [8:0]   cntbytes,  
   input   wire            pre_pulse, 
   input   wire            pulse, 
   input   wire            rst_n, 
   input   wire            run, 
   output  reg             clear, 
   output  reg             idle, 
   output  reg             load, 
   output  reg             mode_internal, 
   output  reg             store
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          IDLE              = 4'd0,
          LOAD              = 4'd1,
          CLEAR             = 4'd2,
          SHIFT             = 4'd3,
          STORE             = 4'd4,
          STOREONEMOREINRUN = 4'd5,
          STOREONEMORE      = 4'd6,
          RESTART           = 4'd7,
          RELOAD            = 4'd8;

reg [3:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   cntbytes,
   cntbits, 
   current_state, 
   pre_pulse, 
   pulse, 
   run
)
begin : next_state_block_proc
   case (current_state) 
      IDLE: begin
         if (run)
            next_state = LOAD;
         else
            next_state = IDLE;
      end
      LOAD: begin
         if (pulse)
            next_state = CLEAR;
         else
            next_state = LOAD;
      end
      CLEAR: begin
         if (pulse)
            next_state = SHIFT;
         else
            next_state = CLEAR;
      end
      SHIFT: begin
         if (cntbits == 3'h7 && cntbytes >= 374 && pre_pulse && run)
            next_state = RELOAD;
         else if (cntbits == 3'h7 && pre_pulse)
            next_state = STORE;
         else
            next_state = SHIFT;
      end
      STORE: begin
         if (!run & cntbytes >= 374)
            next_state = STOREONEMORE;
         else
            next_state = SHIFT;
      end
      STOREONEMOREINRUN: begin
            next_state = SHIFT;
      end
      STOREONEMORE: begin
            next_state = IDLE;
      end
      RESTART: begin
         if (pre_pulse)
            next_state = STOREONEMOREINRUN;
         else
            next_state = RESTART;
      end
      RELOAD: begin
         next_state = RESTART;
      end
      default:
            next_state = IDLE;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   clear = 0;
   idle = 0;
   load = 0;
   mode_internal = 0;
   store = 0;

   // Combined Actions
   case (current_state) 
      IDLE: begin
         idle = 1;
      end
      LOAD: begin
         load = 1;
      end
      CLEAR: begin
         clear = 1;
         mode_internal = 1;
      end
      SHIFT: begin
         mode_internal = 1;
      end
      STORE: begin
         mode_internal = 1;
         store = 1;
      end
      STOREONEMOREINRUN: begin
         mode_internal = 1;
         store = 1;
         clear = 1;
      end
      STOREONEMORE: begin
        store = 1;
      end
      RESTART: begin
         clear = 1;
         mode_internal = 1;
      end
      RELOAD: begin
         mode_internal = 1;
         load = 1;
         store = 1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst_n
) 
begin : clocked_block_proc
   if (!rst_n) begin
      current_state <= IDLE;
   end
   else 
   begin
      current_state <= next_state;
   end
end // Clocked Block

endmodule // control
